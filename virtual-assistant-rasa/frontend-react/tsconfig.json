{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */

    /* Projects */
    "incremental": false /* Enable incremental compilation */,
    "composite": false /* Enable constraints that allow a TypeScript project to be used with project references. */,
    "disableSourceOfProjectReferenceRedirect": false /* Disable preferring source files instead of declaration files when referencing composite projects */,
    "disableSolutionSearching": true /* Opt a project out of multi-project reference checking when editing. */,
    "disableReferencedProjectLoad": false /* Reduce the number of projects loaded automatically by TypeScript. */,

    /* Language and Environment */
    "target": "es2015" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    "experimentalDecorators": false /* Enable experimental support for TC39 stage 2 draft decorators. */,
    "emitDecoratorMetadata": false /* Emit design-type metadata for decorated declarations in source files. */,
	"jsx": "react-jsx" /* Controls how JSX constructs are emitted in JavaScript files. This only affects output of JS files that started in .tsx files. */,
    "noLib": false /* Disable including any library files, including the default lib.d.ts. */,
    "useDefineForClassFields": true /* Emit ECMAScript-standard-compliant class fields. */,

    /* Modules */
    "module": "es2015",         // ! production
    //"module": "commonjs", // ! development
    "rootDir": "./src/" /* Specify the root folder within your source files. */,
    "moduleResolution": "node" /* Specify how TypeScript looks up a file from a given module specifier. */,
    "resolveJsonModule": true /* Enable importing .json files */,
    "noResolve": false /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */,

    /* Emit */
    "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
    "declarationMap": false /* Create sourcemaps for d.ts files. */,
    "emitDeclarationOnly": false /* Only output d.ts files and not JavaScript files. */,
    "sourceMap": false /* Create source map files for emitted JavaScript files. */,
    //"outFile": "./dist/main.js", // ! production
    "outDir": "./dist/", // ! development
    "removeComments": false /* Disable emitting comments. */,
    "noEmit": true /* Disable emitting files from a compilation. */,
    "downlevelIteration": false /* Emit more compliant, but verbose and less performant JavaScript for iteration. */,
    "noEmitOnError": false /* Disable emitting files if any type checking errors are reported. */,
    "preserveValueImports": false /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */,

    /* Interop Constraints */
    "isolatedModules": true /* Ensure that each file can be safely transpiled without relying on other imports. */,
    "allowSyntheticDefaultImports": true /* Allow 'import x from y' when a module doesn't have a default export. */,
    "esModuleInterop": false /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    "noImplicitAny": true /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
    "strictNullChecks": false /* When type checking, take into account `null` and `undefined`. */,
    "strictFunctionTypes": true /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
    "strictBindCallApply": true /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */,
    //"strictPropertyInitialization": true /* Check for class properties that are declared but not set in the constructor. */,
    "noImplicitThis": true /* Enable error reporting when `this` is given the type `any`. */,
    "useUnknownInCatchVariables": true /* Type catch clause variables as 'unknown' instead of 'any'. */,
    "alwaysStrict": false /* Ensure 'use strict' is always emitted. */,
    "noUnusedLocals": true /* Enable error reporting when a local variables aren't read. */,
    "noUnusedParameters": false /* Raise an error when a function parameter isn't read */,
    //"exactOptionalPropertyTypes": true /* Interpret optional property types as written, rather than adding 'undefined'. */,
    "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
    "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
    "noUncheckedIndexedAccess": true /* Include 'undefined' in index signature results */,
    "allowUnusedLabels": false /* Disable error reporting for unused labels. */,
    "allowUnreachableCode": false /* Disable error reporting for unreachable code. */,

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */,
	
	"lib": ["DOM", "DOM.Iterable", "ESNext"] /* lib you can specify a list of built-in API declaration groups that you can chose to include in your project. */,
	"allowJs": false /* Allow JavaScript files to be imported inside your project, instead of just .ts and .tsx files. */
  },
  "include": ["src"],
  "exclude": ["./doc/", "./dist/", "./out/", "./tests/", "./node_modules/"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
